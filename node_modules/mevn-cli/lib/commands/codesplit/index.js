'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _inquirer = _interopRequireDefault(require("inquirer"));

var _nodeBanner = _interopRequireDefault(require("node-banner"));

var _path = _interopRequireDefault(require("path"));

var _exec = _interopRequireDefault(require("../../utils/exec"));

var logger = _interopRequireWildcard(require("../../utils/logger"));

var _helpers = require("../../utils/helpers");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Lazy load components
 *
 * @returns {Promise<void>}
 */
var _default = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var _fetchProjectConfig, template, routesConfigPath, routesConfig, availableComponents, _yield$inquirer$promp, componentName, componentImportPath, regularImportIndex, componentNameIndex;

  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _nodeBanner["default"])('MEVN CLI', 'Light speed setup for MEVN stack based apps.');

        case 2:
          _context.next = 4;
          return (0, _helpers.checkIfConfigFileExists)();

        case 4:
          // Exit for the case of Nuxt.js boilerplate template
          _fetchProjectConfig = (0, _helpers.fetchProjectConfig)(), template = _fetchProjectConfig.template;

          if (template === 'Nuxt.js') {
            logger.error("\n You're having the Nuxt.js boilerplate template");
            process.exit(1);
          }

          routesConfigPath = _path["default"].join('client', 'src', 'router.js');
          routesConfig = (0, _helpers.readFileContent)(routesConfigPath); // Keep hold of regular imported components

          availableComponents = []; // Populate the array with regular imported components

          routesConfig.some(function (item, index) {
            if (item === '') return true;

            if (index >= 2) {
              availableComponents.push(item.split(' ')[1]);
            }
          }); // Warns the user if the list is empty

          if (availableComponents.length) {
            _context.next = 13;
            break;
          }

          logger.info('\n Info: All of the available components are dynamically imported');
          return _context.abrupt("return");

        case 13:
          _context.next = 15;
          return _inquirer["default"].prompt({
            name: 'componentName',
            type: 'list',
            choices: availableComponents,
            message: 'Choose from below'
          });

        case 15:
          _yield$inquirer$promp = _context.sent;
          componentName = _yield$inquirer$promp.componentName;
          componentImportPath = "\"./views/".concat(componentName, ".vue\";"); // Find index corresponding to the regular import statement

          regularImportIndex = routesConfig.indexOf(routesConfig.find(function (item) {
            return item === "import ".concat(componentName, " from ").concat(componentImportPath);
          })); // Find the index corresponding to name: ${componentName}.vue (within route-config)

          componentNameIndex = routesConfig.indexOf(routesConfig.find(function (item) {
            return item.trim() === "name: \"".concat(componentName.toLowerCase(), "\",");
          })); // Update the respective route-config to use dynamic import statement

          routesConfig[componentNameIndex + 1] = "\t  component: () => import(\"./views/".concat(componentName, ".vue\")"); // Remove old import statement

          routesConfig.splice(regularImportIndex, 1); // Write back the updated route-config

          _fs["default"].writeFileSync(routesConfigPath, routesConfig.join('\n'));

          console.log(); // Execute linter

          _context.next = 26;
          return (0, _exec["default"])('npm run lint -- --fix', 'Cleaning up', " From now on ".concat(componentName, " will be rendered asynchronously"), {
            cwd: 'client'
          });

        case 26:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));

exports["default"] = _default;