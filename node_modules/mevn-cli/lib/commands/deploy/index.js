'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _inquirer = _interopRequireDefault(require("inquirer"));

var _nodeBanner = _interopRequireDefault(require("node-banner"));

var _surge = _interopRequireDefault(require("./surge"));

var _heroku = _interopRequireDefault(require("./heroku"));

var _helpers = require("../../utils/helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Deploy the webapp to a cloud solution of choice
 * @returns {Promise<void>}
 */
var _default = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var templateDir, _yield$dirOfChoice, _fetchProjectConfig, template, _fetchProjectConfig2, deployTarget, _yield$inquirer$promp, platform;

  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _nodeBanner["default"])('MEVN CLI', 'Light speed setup for MEVN stack based apps.');

        case 2:
          (0, _helpers.checkIfConfigFileExists)(); // Choose between client/server

          templateDir = 'client';

          if (!_fs["default"].existsSync('./server')) {
            _context.next = 9;
            break;
          }

          _context.next = 7;
          return (0, _helpers.dirOfChoice)();

        case 7:
          _yield$dirOfChoice = _context.sent;
          templateDir = _yield$dirOfChoice.dir;

        case 9:
          if (!(templateDir === 'client')) {
            _context.next = 22;
            break;
          }

          _fetchProjectConfig = (0, _helpers.fetchProjectConfig)(), template = _fetchProjectConfig.template; // Choose platform based on deploy-target for Nuxt.js

          if (!(template === 'Nuxt.js')) {
            _context.next = 16;
            break;
          }

          _fetchProjectConfig2 = (0, _helpers.fetchProjectConfig)(), deployTarget = _fetchProjectConfig2.deployTarget; // static deployment

          if (!(deployTarget === 'static')) {
            _context.next = 15;
            break;
          }

          return _context.abrupt("return", (0, _surge["default"])());

        case 15:
          return _context.abrupt("return", (0, _heroku["default"])(templateDir));

        case 16:
          _context.next = 18;
          return _inquirer["default"].prompt([{
            name: 'platform',
            type: 'list',
            message: 'Choose your preferred platform',
            choices: ['Surge', 'Heroku']
          }]);

        case 18:
          _yield$inquirer$promp = _context.sent;
          platform = _yield$inquirer$promp.platform;

          if (!(platform === 'Surge')) {
            _context.next = 22;
            break;
          }

          return _context.abrupt("return", (0, _surge["default"])());

        case 22:
          (0, _heroku["default"])(templateDir);

        case 23:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));

exports["default"] = _default;