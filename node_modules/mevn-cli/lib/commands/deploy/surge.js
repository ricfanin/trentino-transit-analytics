'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _execa = _interopRequireDefault(require("execa"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _exec = _interopRequireDefault(require("../../utils/exec"));

var _helpers = require("../../utils/helpers");

var _validate = require("../../utils/validate");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Deploys the respective SPA to surge.sh platform
 * @returns {Promise<void>}
 */
var _default = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var projectConfig, template, isConfigured, cmd;
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _validate.validateInstallation)('surge --help');

        case 2:
          console.log();
          projectConfig = (0, _helpers.fetchProjectConfig)();
          template = projectConfig.template, isConfigured = projectConfig.isConfigured;
          cmd = template === 'Nuxt.js' ? 'generate' : 'build';

          if (isConfigured.client) {
            _context.next = 11;
            break;
          }

          _context.next = 9;
          return (0, _exec["default"])("npm install", 'Installing dependencies', 'Dependencies were successfully installed', {
            cwd: 'client'
          });

        case 9:
          // Update .mevnrc
          projectConfig.isConfigured.client = true;

          _fs["default"].writeFileSync('.mevnrc', JSON.stringify(projectConfig, null, 2));

        case 11:
          _context.next = 13;
          return (0, _exec["default"])("npm run ".concat(cmd), 'Creating a production level build', 'Done', {
            cwd: 'client'
          });

        case 13:
          _context.next = 15;
          return (0, _execa["default"])('surge', {
            cwd: _path["default"].join('client', 'dist'),
            stdio: 'inherit'
          });

        case 15:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));

exports["default"] = _default;