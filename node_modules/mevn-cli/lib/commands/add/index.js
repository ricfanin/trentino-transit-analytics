'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _nodeBanner = _interopRequireDefault(require("node-banner"));

var _path = _interopRequireDefault(require("path"));

var _inquirer = _interopRequireDefault(require("inquirer"));

var _exec = _interopRequireDefault(require("../../utils/exec"));

var logger = _interopRequireWildcard(require("../../utils/logger"));

var _helpers = require("../../utils/helpers");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Choose additional deps to install on the go
 *
 * @returns {Promise<void>}
 */
var _default = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(deps, _ref) {
    var dev, templateDir, _yield$dirOfChoice, _fetchProjectConfig, template, isConfigured, installFlag, projectConfig, configuredModules, renderingMode, nuxtModules, nuxtAddons, availableBuildModules, availableModules, nuxtDeps, _yield$inquirer$promp, installCandidate, modules, modulesWithPrefix, buildModules, buildModulesWithPrefix, nuxtConfigPath, nuxtConfig, buildModulesIdx, modulesIdx, addons, configureNuxtVuexStore, vuetifyConfig, buildModulesEndIdx, axiosConfig, modulesEndIdx, contentConfig, _modulesEndIdx, apolloConfig, _modulesEndIdx2, oAuthConfig, _modulesEndIdx3, toastConfig, _modulesEndIdx4, postCssConfig, buildConfigIdx, storybookConfig, _modulesEndIdx5, gitIgnorePath, gitIgnoreContent, nuxtIgnorePath, nuxtIgnoreContent, markdownitConfig, _modulesEndIdx6, installedNuxtModules, configFilePath, config, vuexStoreTemplate, storeFilePath, blankLineIndex, routerIndex, preIndex;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            dev = _ref.dev;
            _context.next = 3;
            return (0, _nodeBanner["default"])('MEVN CLI', 'Light speed setup for MEVN stack based apps.');

          case 3:
            (0, _helpers.checkIfConfigFileExists)(); // Global reference to the directory of choice

            templateDir = 'client'; // Get to know whether the deps are to be installed for client/server directory

            if (!_fs["default"].existsSync('./server')) {
              _context.next = 10;
              break;
            }

            _context.next = 8;
            return (0, _helpers.dirOfChoice)();

          case 8:
            _yield$dirOfChoice = _context.sent;
            templateDir = _yield$dirOfChoice.dir;

          case 10:
            _fetchProjectConfig = (0, _helpers.fetchProjectConfig)(), template = _fetchProjectConfig.template, isConfigured = _fetchProjectConfig.isConfigured; // Do not proceed if the deps were not supplied

            if (!deps.length && (templateDir === 'server' || templateDir === 'client' && template !== 'Nuxt.js')) {
              logger.warn(' Please specify the dependencies to install');
              process.exit(1);
            }

            installFlag = dev ? '--save-dev' : '--save'; // Install dependencies

            if (!deps.length) {
              _context.next = 16;
              break;
            }

            _context.next = 16;
            return (0, _exec["default"])("npm install ".concat(installFlag, " ").concat(deps.join(' ')), "Installing ".concat(deps.join(', ')), 'Dependencies were successfully installed', {
              cwd: templateDir
            });

          case 16:
            if (!dev) {
              _context.next = 18;
              break;
            }

            return _context.abrupt("return");

          case 18:
            if (!(template === 'Nuxt.js' && !deps.length)) {
              _context.next = 79;
              break;
            }

            // Holds reference to the project specific config (.mevnrc)
            projectConfig = (0, _helpers.fetchProjectConfig)(); // Nuxt.js modules that are already installed and configured (.mevnrc)

            configuredModules = projectConfig.modules, renderingMode = projectConfig.renderingMode; // Supported Nuxt.js modules

            nuxtModules = ['vuetify', 'pwa', 'axios', 'content', 'apollo', 'oauth', 'toast', 'bulma', 'tailwindcss', 'storybook', 'markdownit'];

            if (renderingMode === 'spa') {
              // nuxt-oauth requires server rendered app
              nuxtModules = nuxtModules.filter(function (module) {
                return module !== 'oauth';
              });
            } // These addons doesn't require installation


            nuxtAddons = ['vuex']; // Supported Nuxt.js buildModules

            availableBuildModules = ['pwa', 'vuetify', 'storybook', 'tailwindcss']; // Supported Nuxt.js modules

            availableModules = nuxtModules.filter(function (module) {
              return !availableBuildModules.includes(module);
            }); // Nuxt.js modules that are available for installation

            nuxtDeps = [].concat(nuxtModules, nuxtAddons).filter(function (dep) {
              return !configuredModules.includes(dep);
            });

            if (!nuxtDeps.length) {
              logger.warn(' Please specify the dependencies to install');
              process.exit(1);
            }

            _context.next = 30;
            return _inquirer["default"].prompt([{
              name: 'installCandidate',
              type: 'checkbox',
              message: 'Choose the required Nuxt.js modules',
              choices: nuxtDeps
            }]);

          case 30:
            _yield$inquirer$promp = _context.sent;
            installCandidate = _yield$inquirer$promp.installCandidate;
            // Nuxt.js modules that are supposed to be installed
            modules = installCandidate.filter(function (dep) {
              return availableModules.includes(dep);
            }); // Add the respective prefix

            modulesWithPrefix = modules.map(function (module) {
              return "".concat(module === 'oauth' ? 'nuxt-oauth' // nuxt-oauth
              : module === 'content' ? "@nuxt/".concat(module) : "@nuxtjs/".concat(module));
            } // @nuxt/content has different prefix
            ); // If the user opted for atleast a Nuxt.js module

            if (!modules.length) {
              _context.next = 37;
              break;
            }

            _context.next = 37;
            return (0, _exec["default"])("npm install --save ".concat(modulesWithPrefix.join(' ')), "Installing Nuxt.js modules", 'Successfully installed the opted Nuxt.js modules', {
              cwd: templateDir
            });

          case 37:
            // Nuxt.js modules to be installed as a devDependency
            buildModules = installCandidate.filter(function (dep) {
              return availableBuildModules.includes(dep);
            }); // If the user opted for atleast a Nuxt.js buildModule

            if (!buildModules.length) {
              _context.next = 42;
              break;
            }

            // Add @nuxtjs prefix
            buildModulesWithPrefix = buildModules.map(function (buildModule) {
              return "@nuxtjs/".concat(buildModule);
            }); // Install buildModules as a devDep

            _context.next = 42;
            return (0, _exec["default"])("npm install --save-dev ".concat(buildModulesWithPrefix.join(' ')), "Installing Nuxt.js buildModules", 'Successfully installed the opted Nuxt.js buildModules', {
              cwd: templateDir
            });

          case 42:
            // Read initial content from nuxt.config.js
            nuxtConfigPath = _path["default"].join('client', 'nuxt.config.js');
            nuxtConfig = (0, _helpers.readFileContent)(nuxtConfigPath); // Add 2 so that the content gets inserted at the right position

            buildModulesIdx = nuxtConfig.findIndex(function (line) {
              return line.includes('buildModules:');
            }) + 2;
            modulesIdx = nuxtConfig.findIndex(function (line) {
              return line.includes('modules:');
            }) + 2; // Opted Nuxt.js addons

            addons = installCandidate.filter(function (dep) {
              return nuxtAddons.includes(dep);
            }); // Configure vuex-store for Nuxt.js template

            configureNuxtVuexStore = function configureNuxtVuexStore() {
              var vuexNuxtStoreTemplate = ['export const state = () => ({', '  counter: 0,', '})', '', 'export const mutations = {', '  increment (state) {', '\tstate.counter++', '  },', '}']; // Navigate to the store directory and create a basic store template file

              var storeFilePath = _path["default"].join('client', 'store', 'index.js');

              if (!_fs["default"].existsSync(storeFilePath)) {
                _fs["default"].writeFileSync(storeFilePath, vuexNuxtStoreTemplate.join('\n'));
              }
            };

            if (addons.includes('vuex')) {
              configureNuxtVuexStore();
            } // Configure @nuxtjs/vuetify


            if (buildModules.includes('vuetify')) {
              vuetifyConfig = ["".concat(' '.repeat(2), "vuetify: {"), "".concat(' '.repeat(4), "/* module options */"), "".concat(' '.repeat(2), "},")];
              nuxtConfig.splice(buildModulesIdx, 0, "".concat(' '.repeat(4), "'@nuxtjs/vuetify',")); // Add 1 so that the content gets inserted after the buildModules array

              buildModulesEndIdx = nuxtConfig.indexOf("".concat(' '.repeat(2), "],"), buildModulesIdx) + 1; // Add @nuxtjs/vuetify config beneath the buildModules array

              vuetifyConfig.forEach(function (config, idx) {
                return nuxtConfig.splice(buildModulesEndIdx + idx, 0, config);
              });
            } // Recompute since buildModules was updated


            modulesIdx = nuxtConfig.findIndex(function (line) {
              return line.includes('modules:');
            }) + 2; // Configure @nuxtjs/axios module

            if (modules.includes('axios')) {
              axiosConfig = ["".concat(' '.repeat(2), "axios: {"), "".concat(' '.repeat(4), "// proxyHeaders: false"), "".concat(' '.repeat(2), "},")];
              nuxtConfig.splice(modulesIdx, 0, "".concat(' '.repeat(4), "'@nuxtjs/axios',")); // Add 1 so that the content gets inserted after the modules array

              modulesEndIdx = nuxtConfig.indexOf("".concat(' '.repeat(2), "],"), modulesIdx) + 1; // Add @nuxtjs/axios config beneath the modules array

              axiosConfig.forEach(function (config, idx) {
                return nuxtConfig.splice(modulesEndIdx + idx, 0, config);
              });
            } // Configure @nuxtjs/pwa buildModule


            if (buildModules.includes('pwa')) {
              nuxtConfig.splice(buildModulesIdx, 0, "".concat(' '.repeat(4), "'@nuxtjs/pwa',"));
            } // Recompute since buildModules was updated


            modulesIdx = nuxtConfig.findIndex(function (line) {
              return line.includes('modules:');
            }) + 2; // Configure @nuxt/content module

            if (modules.includes('content')) {
              contentConfig = ["".concat(' '.repeat(2), "content: {"), "".concat(' '.repeat(4), " //Options"), "".concat(' '.repeat(2), "},")];
              nuxtConfig.splice(modulesIdx, 0, "".concat(' '.repeat(4), "'@nuxt/content',"));
              _modulesEndIdx = nuxtConfig.indexOf("".concat(' '.repeat(2), "],"), modulesIdx) + 1; // Add @nuxt/content config beneath the modules array

              contentConfig.forEach(function (config, idx) {
                return nuxtConfig.splice(_modulesEndIdx + idx, 0, config);
              });
            } // Configure @nuxtjs/apollo module


            if (modules.includes('apollo')) {
              apolloConfig = ["".concat(' '.repeat(2), "apollo: {"), "".concat(' '.repeat(4), "clientConfigs: {"), "".concat(' '.repeat(6), "default: {"), "".concat(' '.repeat(8), "httpEndpoint: 'http://localhost:4000',"), "".concat(' '.repeat(6), "}"), "".concat(' '.repeat(4), "}"), "".concat(' '.repeat(2), "},")];
              nuxtConfig.splice(modulesIdx, 0, "".concat(' '.repeat(4), "'@nuxtjs/apollo',"));
              _modulesEndIdx2 = nuxtConfig.indexOf("".concat(' '.repeat(2), "],"), modulesIdx) + 1; // Add @nuxtjs/apollo config beneath the modules array

              apolloConfig.forEach(function (config, idx) {
                return nuxtConfig.splice(_modulesEndIdx2 + idx, 0, config);
              });
            } // Configure nuxt-oauth module


            if (modules.includes('oauth')) {
              oAuthConfig = ["".concat(' '.repeat(2), "oauth: {"), "".concat(' '.repeat(4), "sessionName: 'mySession',"), "".concat(' '.repeat(4), "secretKey: process.env.SECRET_KEY || 'SECRET_KEY',"), "".concat(' '.repeat(4), "oauthHost: process.env.OAUTH_HOST || 'OAUTH_HOST',"), "".concat(' '.repeat(4), "oauthClientID: process.env.OAUTH_CLIENT_ID || 'OAUTH_CLIENT_ID',"), "".concat(' '.repeat(4), "oauthClientSecret: process.env.OAUTH_CLIENT_SECRET || 'OAUTH_CLIENT_SECRET',"), "".concat(' '.repeat(4), "onLogout: (req, res) => {"), "".concat(' '.repeat(6), "// do something after logging out"), "".concat(' '.repeat(4), "},"), "".concat(' '.repeat(4), "fetchUser: (accessToken, request) => {"), "".concat(' '.repeat(6), "// do something to return the user"), "".concat(' '.repeat(4), "},"), "".concat(' '.repeat(2), "},")];
              nuxtConfig.splice(modulesIdx, 0, "".concat(' '.repeat(4), "'nuxt-oauth',"));
              _modulesEndIdx3 = nuxtConfig.indexOf("".concat(' '.repeat(2), "],"), modulesIdx) + 1; // Add nuxt-oauth config beneath the modules array

              oAuthConfig.forEach(function (config, idx) {
                return nuxtConfig.splice(_modulesEndIdx3 + idx, 0, config);
              }); // It requires Vuex Store to be activated

              configureNuxtVuexStore();
            } // Configure @nuxtjs/toast module


            if (modules.includes('toast')) {
              toastConfig = ["".concat(' '.repeat(2), "toast: {"), "".concat(' '.repeat(4), "position: 'top-center',"), "".concat(' '.repeat(4), "register: [ // Register custom toasts"), "".concat(' '.repeat(4), "],"), "".concat(' '.repeat(2), "},")];
              nuxtConfig.splice(modulesIdx, 0, "".concat(' '.repeat(4), "'@nuxtjs/toast',"));
              _modulesEndIdx4 = nuxtConfig.indexOf("".concat(' '.repeat(2), "],"), modulesIdx) + 1; // Add @nuxtjs/toast config beneath the modules array

              toastConfig.forEach(function (config, idx) {
                return nuxtConfig.splice(_modulesEndIdx4 + idx, 0, config);
              });
            } // Configure @nuxtjs/tailwindcss buildModule


            if (buildModules.includes('tailwindcss')) {
              nuxtConfig.splice(buildModulesIdx, 0, "".concat(' '.repeat(4), "'@nuxtjs/tailwindcss',"));
            } // Recompute since buildModules was updated


            modulesIdx = nuxtConfig.findIndex(function (line) {
              return line.includes('modules:');
            }) + 2; // Configure @nuxtjs/bulma module

            if (modules.includes('bulma')) {
              postCssConfig = ["".concat(' '.repeat(4), "postcss: {"), "".concat(' '.repeat(6), "preset: {"), "".concat(' '.repeat(8), "features: {"), "".concat(' '.repeat(10), "customProperties: false"), "".concat(' '.repeat(8), "}"), "".concat(' '.repeat(6), "}"), "".concat(' '.repeat(4), "},")];
              nuxtConfig.splice(modulesIdx, 0, "".concat(' '.repeat(4), "'@nuxtjs/bulma',")); // Add 4 so that the content gets inserted at the right position

              buildConfigIdx = nuxtConfig.findIndex(function (line) {
                return line.includes('build:');
              }) + 4;
              postCssConfig.forEach(function (config, idx) {
                return nuxtConfig.splice(buildConfigIdx + idx, 0, config);
              });
            } // Configure @nuxtjs/storybook buildModule


            if (buildModules.includes('storybook')) {
              storybookConfig = ["".concat(' '.repeat(2), "storybook: {"), "".concat(' '.repeat(4), " // Options"), "".concat(' '.repeat(2), "},")];
              _modulesEndIdx5 = nuxtConfig.indexOf("".concat(' '.repeat(2), "],"), modulesIdx) + 1; // Add @nuxtjs/storybook config beneath the modules array

              storybookConfig.forEach(function (config, idx) {
                return nuxtConfig.splice(_modulesEndIdx5 + idx, 0, config);
              }); // Update .gitignore

              gitIgnorePath = _path["default"].join('client', '.gitignore');
              gitIgnoreContent = (0, _helpers.readFileContent)(gitIgnorePath);
              gitIgnoreContent.push('.nuxt-storybook', 'storybook-static'); // Write back the updated file content

              _fs["default"].writeFileSync(gitIgnorePath, gitIgnoreContent.join('\n')); // Update .nuxtignore


              nuxtIgnorePath = _path["default"].join('client', '.nuxtignore');

              if (_fs["default"].existsSync(nuxtIgnorePath)) {
                nuxtIgnoreContent = (0, _helpers.readFileContent)(nuxtIgnorePath);
                nuxtIgnoreContent.push('**/*.stories.js'); // Write back the updated file content

                _fs["default"].writeFileSync(nuxtIgnorePath, nuxtIgnoreContent.join('\n'));
              } else {
                // Create.nuxtignore if it doesn't exist
                _fs["default"].writeFileSync(nuxtIgnorePath, '**/*.stories.js');
              }
            } // Recompute since buildModules was updated


            modulesIdx = nuxtConfig.findIndex(function (line) {
              return line.includes('modules:');
            }) + 2; // Configure @nuxtjs/markdownit module

            if (modules.includes('markdownit')) {
              markdownitConfig = ["".concat(' '.repeat(2), "markdownit: {"), "".concat(' '.repeat(4), "preset: 'default',"), "".concat(' '.repeat(4), "linkify: true,"), "".concat(' '.repeat(4), "breaks: true,"), "".concat(' '.repeat(4), "use: ["), "".concat(' '.repeat(6), "'markdown-it-div',"), "".concat(' '.repeat(6), "'markdown-it-attrs',"), "".concat(' '.repeat(4), "],"), "".concat(' '.repeat(2), "},")];
              nuxtConfig.splice(modulesIdx, 0, "".concat(' '.repeat(4), "'@nuxtjs/markdownit',"));
              _modulesEndIdx6 = nuxtConfig.indexOf("".concat(' '.repeat(2), "],"), modulesIdx) + 1; // Add @nuxtjs/toast config beneath the modules array

              markdownitConfig.forEach(function (config, idx) {
                return nuxtConfig.splice(_modulesEndIdx6 + idx, 0, config);
              });
            } // Update modules entry with the installed Nuxt.js modules


            installedNuxtModules = [].concat(modules, buildModules, addons);

            if (installedNuxtModules.includes('oauth') && !installedNuxtModules.includes('vuex')) {
              // Vuex Store is activated with nuxt-oauth
              installedNuxtModules.push('vuex');
            }

            configuredModules.push.apply(configuredModules, _toConsumableArray(installedNuxtModules)); // Update the modules entry

            projectConfig.modules = configuredModules;

            if (isConfigured[templateDir]) {
              _context.next = 73;
              break;
            }

            _context.next = 71;
            return (0, _exec["default"])('npm install', 'Installing dependencies in the background. Hold on...', 'Dependencies were successfully installed', {
              cwd: templateDir
            });

          case 71:
            // Update .mevnrc
            projectConfig.isConfigured[templateDir] = true;

            _fs["default"].writeFileSync('.mevnrc', JSON.stringify(projectConfig, null, 2));

          case 73:
            _context.next = 75;
            return (0, _exec["default"])('npm run lint -- --fix', 'Cleaning up', 'Fixed lint errors', {
              cwd: templateDir
            });

          case 75:
            _fs["default"].writeFileSync('.mevnrc', JSON.stringify(projectConfig, null, 2)); // Write back the updated content


            _fs["default"].writeFileSync(nuxtConfigPath, nuxtConfig.join('\n'));

            _context.next = 83;
            break;

          case 79:
            configFilePath = _path["default"].join('client', 'src', 'main.js');
            config = (0, _helpers.readFileContent)(configFilePath); // Configure vuex-store

            if (deps.includes('vuex')) {
              // Content to be inserted
              vuexStoreTemplate = ["import Vue from \"vue\";", "import Vuex from \"vuex\";", '', "Vue.use(Vuex);", '', "export default new Vuex.Store({", "".concat(' '.repeat(2), "state: {},"), '', "".concat(' '.repeat(2), "getters: {},"), '', "".concat(' '.repeat(2), "mutations: {},"), '', "".concat(' '.repeat(2), "actions: {}"), "});", '']; // Creates a new store.js file within the client/src directory.

              storeFilePath = _path["default"].join('client', 'src', 'store.js');

              _fs["default"].writeFileSync(storeFilePath, vuexStoreTemplate.join('\n')); // Fetch the index corresponding to the very first blank line


              blankLineIndex = config.indexOf(config.find(function (line) {
                return line === '';
              })); // Inserting the import statement for vuex-store

              config.splice(blankLineIndex, 0, "import store from \"./store\";"); // Fetching the position where in which router is passed on to the Vue instance

              routerIndex = config.indexOf(config.find(function (line) {
                return line.trim() === 'router,';
              })); // Insert store just after router so that it gets passed on to the Vue instance

              config.splice(routerIndex + 1, 0, "  store,"); // Cleaning up

              if (deps.includes('vuetify')) config.splice(blankLineIndex + 1, 1); // Write back the updated config

              _fs["default"].writeFileSync(configFilePath, config.join('\n'));
            } // Configure vuetify


            if (deps.includes('vuetify')) {
              // Import Vuetify and minified css towards the top of the config file
              ["import Vuetify from \"vuetify\";", "import \"vuetify/dist/vuetify.min.css\";"].forEach(function (item, i) {
                return config.splice(i + 1, 0, item);
              }); // Fetch the index after which the respective config should come up

              preIndex = config.indexOf(config.find(function (line) {
                return line.includes('Vue.config.productionTip');
              })); // Inserting the respective Vuetify config

              ['Vue.use(Vuetify);', ''].forEach(function (item, i) {
                return config.splice(preIndex + i, 0, item);
              }); // Write back the updated config

              _fs["default"].writeFileSync(configFilePath, config.join('\n'));
            }

          case 83:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports["default"] = _default;