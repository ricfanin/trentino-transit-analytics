'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _inquirer = _interopRequireDefault(require("inquirer"));

var _nodeBanner = _interopRequireDefault(require("node-banner"));

var _path = _interopRequireDefault(require("path"));

var _exec = _interopRequireDefault(require("../../utils/exec"));

var logger = _interopRequireWildcard(require("../../utils/logger"));

var _helpers = require("../../utils/helpers");

var _validate = require("../../utils/validate");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Converts a given string into lower camel case
 *
 * @param {String} str - Text to be converted
 * @returns {String}
 */
var toLowerCamelCase = function toLowerCamelCase(str) {
  return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();
};
/**
 * Generates a Vue SFC
 *
 * @returns {Promise<void>}
 */


var _default = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var progressMsg, _yield$inquirer$promp, componentName, projectConfig, template, isConfigured, _yield$inquirer$promp2, componentType, componentTemplate, componentPath, routesConfigPath, routesConfig, postImportIndex, routesArrayEndsWithIndex, routeConfigToAppend;

  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _nodeBanner["default"])('MEVN CLI', 'Light speed setup for MEVN stack based apps.');

        case 2:
          (0, _helpers.checkIfConfigFileExists)(); // Message to show up alongwith the spinner

          progressMsg = 'Getting things ready';
          _context.next = 6;
          return _inquirer["default"].prompt([{
            type: 'input',
            name: 'componentName',
            message: 'Please provide a name for the new component',
            validate: _validate.validateInput
          }]);

        case 6:
          _yield$inquirer$promp = _context.sent;
          componentName = _yield$inquirer$promp.componentName;
          // Fetch information specific to the project
          projectConfig = (0, _helpers.fetchProjectConfig)();
          template = projectConfig.template, isConfigured = projectConfig.isConfigured;
          _context.next = 12;
          return _inquirer["default"].prompt([{
            type: 'list',
            name: 'componentType',
            message: 'Please choose the component type',
            choices: ['UI Component', 'Page Component (generates route)']
          }]);

        case 12:
          _yield$inquirer$promp2 = _context.sent;
          componentType = _yield$inquirer$promp2.componentType;

          // Convert component name to lower-camel-case
          if (!(template === 'Nuxt.js' && componentType !== 'UI Component')) {
            componentName = toLowerCamelCase(componentName);
          } // SFC template


          componentTemplate = ['<template>', '  <center>', '    <br />', "    <h1>This is the ".concat(componentName, " component</h1>"), '  </center>', '</template>', '', '<script>', 'export default {', '  data() {', '    return {}', '  }', '}', '</script>', '', '<style scoped></style>', '']; // Get to know whether the route config is to be touched

          componentPath = '';

          if (componentType === 'UI Component') {
            componentPath = template === 'Nuxt.js' ? 'client/components' : 'client/src/components';
          } else {
            componentPath = template === 'Nuxt.js' ? 'client/pages' : 'client/src/views';
          } // Duplicate component


          if (!_fs["default"].existsSync(_path["default"].join(componentPath, "".concat(componentName, ".vue")))) {
            _context.next = 21;
            break;
          }

          logger.info("\n Info: ".concat(componentName, ".vue already exists"));
          return _context.abrupt("return");

        case 21:
          _fs["default"].writeFileSync(_path["default"].join(componentPath, "".concat(componentName, ".vue")), componentTemplate.join('\n'));

          console.log(); // Execute linter

          if (isConfigured.client) {
            _context.next = 29;
            break;
          }

          _context.next = 26;
          return (0, _exec["default"])('npm install', progressMsg, 'Successfully installed the dependencies', {
            cwd: 'client'
          });

        case 26:
          progressMsg = 'Cleaning up'; // Update project specific dotfile

          projectConfig.isConfigured.client = true;

          _fs["default"].writeFileSync('.mevnrc', JSON.stringify(projectConfig, null, 2));

        case 29:
          if (!(template === 'Nuxt.js' || componentType === 'UI Component')) {
            _context.next = 33;
            break;
          }

          _context.next = 32;
          return (0, _exec["default"])('npm run lint -- --fix', progressMsg, "Successfully created ".concat(componentName, ".vue file in ").concat(componentPath), {
            cwd: 'client'
          });

        case 32:
          return _context.abrupt("return", _context.sent);

        case 33:
          routesConfigPath = _path["default"].join('client', 'src', 'router.js');
          routesConfig = (0, _helpers.readFileContent)(routesConfigPath);
          postImportIndex = routesConfig.indexOf(routesConfig.find(function (item) {
            return item === '';
          })); // Add an import statement at the respective place

          routesConfig[postImportIndex] = "import ".concat(componentName, " from \"./views/").concat(componentName, ".vue\";"); // Include a new line to compensate the previous addition

          routesConfig.splice(postImportIndex + 1, 0, ''); // Fetch the index corresponding to route-config array closing bracket

          routesArrayEndsWithIndex = routesConfig.indexOf(routesConfig.find(function (item) {
            return item.trim() === ']';
          })); // Append a comma (},) to the previous component route-config delimiter

          routesConfig[routesArrayEndsWithIndex - 1] = '\t},'; // Route config for generated component

          routeConfigToAppend = ['\t{', "\t  path: \"/".concat(componentName.toLowerCase(), "\","), "\t  name: \"".concat(componentName.toLowerCase(), "\","), "\t  component: ".concat(componentName), '\t}']; // Append the route config for newly created component

          routeConfigToAppend.forEach(function (config, index) {
            return routesConfig.splice(routesArrayEndsWithIndex + index, 0, config);
          }); // Write back the updated config

          _fs["default"].writeFileSync(routesConfigPath, routesConfig.join('\n')); // Execute linter


          _context.next = 45;
          return (0, _exec["default"])('npm run lint -- --fix', progressMsg, "Successfully created ".concat(componentName, ".vue file in ").concat(componentPath), {
            cwd: 'client'
          });

        case 45:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));

exports["default"] = _default;