'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _inquirer = _interopRequireDefault(require("inquirer"));

var _path = _interopRequireDefault(require("path"));

var _nodeBanner = _interopRequireDefault(require("node-banner"));

var _exec = _interopRequireDefault(require("../../utils/exec"));

var _component = _interopRequireDefault(require("./component"));

var _helpers = require("../../utils/helpers");

var _validate = require("../../utils/validate");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// Holds reference to the path where the boilerplate files reside
var templatePath = _path["default"].join(__dirname, '..', '..', 'templates');
/**
 * Creates a directory with the given name and associated boilerplate template
 *
 * @param {String} dir - Directory name
 * @returns {Void}
 */


var createDir = function createDir(dir) {
  // Copy to destination
  (0, _helpers.copyDirSync)(_path["default"].join(templatePath, dir), 'server');
};
/**
 * Generates a new file of choice
 *
 * @returns {Promise<void>}
 */


var _default = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var _yield$inquirer$promp, type, projectConfig, template, isConfigured, routesFilePath, _yield$inquirer$promp2, uri, serverFilePath, serverFileContent, postImportIndex, requiredIndex;

  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _nodeBanner["default"])('MEVN CLI', 'Light speed setup for MEVN stack based apps.');

        case 2:
          (0, _helpers.checkIfConfigFileExists)();

          if (!(!_fs["default"].existsSync('./server') || _fs["default"].existsSync(_path["default"].join('server', 'models')))) {
            _context.next = 5;
            break;
          }

          return _context.abrupt("return", (0, _component["default"])());

        case 5:
          _context.next = 7;
          return _inquirer["default"].prompt([{
            type: 'list',
            name: 'type',
            message: 'Choose from below',
            choices: ['Component (client)', 'CRUD Boilerplate (server)']
          }]);

        case 7:
          _yield$inquirer$promp = _context.sent;
          type = _yield$inquirer$promp.type;
          // Fetch boilerplate template used from .mevnrc
          projectConfig = (0, _helpers.fetchProjectConfig)();
          template = projectConfig.template, isConfigured = projectConfig.isConfigured; // Generate client side component

          if (!type.includes('Component')) {
            _context.next = 13;
            break;
          }

          return _context.abrupt("return", (0, _component["default"])());

        case 13:
          // Generate CRUD boilerplate for the server
          if (template === 'GraphQL') {
            // Create graphql-schema directory
            createDir('graphql'); // Create models directory

            createDir('models');
          } else {
            // Set up routes for CRUD functionality
            routesFilePath = _path["default"].join('server', 'routes', 'api.js');

            _fs["default"].writeFileSync(routesFilePath, _fs["default"].readFileSync(_path["default"].join(templatePath, 'routes', 'index.js'))); // Create controllers directory


            createDir('controllers'); // Create models directory

            createDir('models');
          } // Create .env file


          _context.next = 16;
          return _inquirer["default"].prompt([{
            type: 'input',
            name: 'uri',
            message: 'Please provide the MongoDB URI path',
            "default": 'mongodb://localhost:27017',
            validate: _validate.validateInput
          }]);

        case 16:
          _yield$inquirer$promp2 = _context.sent;
          uri = _yield$inquirer$promp2.uri;

          _fs["default"].writeFileSync(_path["default"].join('server', '.env'), "DB_URL=".concat(uri, "/userdb"));

          if (isConfigured.server) {
            _context.next = 24;
            break;
          }

          _context.next = 22;
          return (0, _exec["default"])('npm install', 'Installing dependencies', 'Dependencies were successfully installed', {
            cwd: 'server'
          });

        case 22:
          // .mevnrc
          projectConfig.isConfigured.server = true;

          _fs["default"].writeFileSync('.mevnrc', JSON.stringify(projectConfig, null, 2));

        case 24:
          _context.next = 26;
          return (0, _exec["default"])('npm install --save mongoose', 'Installing mongoose ORM. Hold on', "You're all set to interact with the DB", {
            cwd: 'server'
          });

        case 26:
          (0, _helpers.copyDirSync)(_path["default"].join(templatePath, 'helpers'), 'server');
          serverFilePath = _path["default"].join('server', 'server.js');
          serverFileContent = (0, _helpers.readFileContent)(serverFilePath);
          postImportIndex = serverFileContent.findIndex(function (item) {
            return item === '';
          }); // second occurrence

          requiredIndex = serverFileContent.indexOf('', postImportIndex + 1); // Include a new line to compensate the previous addition

          serverFileContent.splice(requiredIndex + 1, 0, 'require("./helpers/db/mongodb.js")();', '');

          _fs["default"].writeFileSync(serverFilePath, serverFileContent.join('\n'));

        case 33:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));

exports["default"] = _default;