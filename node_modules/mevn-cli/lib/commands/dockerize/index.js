'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _execa = _interopRequireDefault(require("execa"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _nodeBanner = _interopRequireDefault(require("node-banner"));

var _helpers = require("../../utils/helpers");

var _validate = require("../../utils/validate");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Returns the respective file content as an array
 *
 * @param {String} configFile - File whose content is to be read
 * @returns {String[]}
 */
var getFileContent = function getFileContent(configFile) {
  // Holds reference to the path where docker-config files reside
  var dockerConfigTemplatePath = _path["default"].join(__dirname, '..', '..', 'templates', 'docker', configFile);

  return (0, _helpers.readFileContent)(dockerConfigTemplatePath);
};
/**
 * Make data directory for mongo container to mount in order to persist
 * the database.
 *
 * @returns {void}
 */


var makeDataDir = function makeDataDir() {
  _fs["default"].mkdirSync(_path["default"].join('tmp', 'data'), {
    recursive: true
  }); // Create .gitignore at project root


  var gitIgnoreContents = ['# MEVN_GENERATED:MONGO', '/tmp', '\n'].join('\n');

  if (_fs["default"].existsSync('.gitignore')) {
    var mongoGitIgnoreHeader = '# MEVN_GENERATED:MONGO';
    gitIgnoreContents = _fs["default"].readFileSync('.gitignore', 'utf8'); // Early return in case .gitignore includes the respective header

    if (new RegExp(mongoGitIgnoreHeader, 'g').test(gitIgnoreContents)) {
      return;
    }

    gitIgnoreContents += ['\n', '# MEVN_GENERATED:MONGO', '/tmp', '\n'].join('\n');
  }

  _fs["default"].writeFileSync('.gitignore', gitIgnoreContents);
};
/**
 * Launch multiple containers with docker-compose (client, server and mongo client)
 *
 * @returns {Promise<void>}
 */


var _default = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var _fetchProjectConfig, template, dockerComposeTemplate, dockerFileTemplate, clientDockerFilePath, serverDockerFilePath, serverDockerIgnorePath, mongoDBConfig, startIdx, endIdx, clientDockerIgnorePath, dockerIgnoreContent;

  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _nodeBanner["default"])('MEVN CLI', 'Light speed setup for MEVN stack based apps.');

        case 2:
          (0, _helpers.checkIfConfigFileExists)();
          _context.next = 5;
          return (0, _validate.validateInstallation)('docker');

        case 5:
          // .mevnrc
          _fetchProjectConfig = (0, _helpers.fetchProjectConfig)(), template = _fetchProjectConfig.template; // Get the respective file contents

          dockerComposeTemplate = getFileContent('docker-compose.yml');
          dockerFileTemplate = getFileContent('Dockerfile'); // Create Dockerfile for client directory

          clientDockerFilePath = _path["default"].join('client', 'Dockerfile');

          if (!_fs["default"].existsSync(clientDockerFilePath)) {
            if (template === 'Nuxt.js') {
              // docker-compose.yml
              dockerComposeTemplate[4] = "".concat(' '.repeat(4), "command: bash -c \"npm install && npm run dev\"");
              dockerComposeTemplate[9] = "".concat(' '.repeat(6), "- \"3000:3000\"");
              dockerComposeTemplate.splice(10, 0, "".concat(' '.repeat(4), "environment:"));
              dockerComposeTemplate.splice(11, 0, "".concat(' '.repeat(6), "HOST: 0.0.0.0"));
            }

            _fs["default"].writeFileSync(clientDockerFilePath, dockerFileTemplate.join('\n'));
          }

          if (_fs["default"].existsSync('server')) {
            // Create Dockerfile for server directory
            serverDockerFilePath = _path["default"].join('server', 'Dockerfile');

            if (!_fs["default"].existsSync(serverDockerFilePath)) {
              _fs["default"].writeFileSync(serverDockerFilePath, dockerFileTemplate.join('\n'));
            } // Create .dockerignore within server directory


            serverDockerIgnorePath = _path["default"].join('server', '.dockerignore');

            if (!_fs["default"].existsSync(serverDockerIgnorePath)) {
              _fs["default"].writeFileSync(serverDockerIgnorePath, 'node_modules');
            } // Configure env variables for CRUD boilerplate template
            // to be consumed within the Docker container


            if (_fs["default"].existsSync(_path["default"].join('server', 'models'))) {
              if (!_fs["default"].existsSync(_path["default"].join('tmp', 'data'))) {
                makeDataDir(); // dockerize command was invoked after generating the CRUD boilerplate

                if (_fs["default"].existsSync('docker-compose.yml')) {
                  // Content to be inserted towards the end of docker-compose.yml
                  mongoDBConfig = ["".concat(' '.repeat(4), "depends_on:"), "".concat(' '.repeat(6), "- mongo"), '', "".concat(' '.repeat(2), "mongo:"), "".concat(' '.repeat(4), "image: mongo"), "".concat(' '.repeat(4), "volumes:"), "".concat(' '.repeat(6), "- ./tmp/data:/data/db"), "".concat(' '.repeat(4), "ports:"), "".concat(' '.repeat(6), "- \"27017:27017\"")]; // Read existing file contents

                  dockerComposeTemplate = _fs["default"].readFileSync('docker-compose.yml', 'utf8').split('\n'); // Update docker-compose.yml file contents

                  dockerComposeTemplate = [].concat(dockerComposeTemplate, mongoDBConfig);
                }

                startIdx = dockerComposeTemplate.findIndex(function (line) {
                  return line.trim() === '- ./server:/app';
                });
                dockerComposeTemplate.splice(startIdx + 1, 0, "".concat(' '.repeat(4), "environment:"));
                dockerComposeTemplate.splice(startIdx + 2, 0, "".concat(' '.repeat(6), "- DB_URL=mongodb://mongo:27017/userdb")); // Write to docker-compose.yml

                _fs["default"].writeFileSync('docker-compose.yml', dockerComposeTemplate.join('\n'));
              }
            } else {
              endIdx = template === 'Nuxt.js' ? 21 : 19;
              dockerComposeTemplate = dockerComposeTemplate.slice(0, endIdx);
            }
          } // Create .dockerignore within client directory


          clientDockerIgnorePath = _path["default"].join('client', '.dockerignore');

          if (!_fs["default"].existsSync(clientDockerIgnorePath)) {
            dockerIgnoreContent = 'node_modules\ndist';

            _fs["default"].writeFileSync(clientDockerIgnorePath, "".concat(template === 'Nuxt.js' ? dockerIgnoreContent + '\n.nuxt' // Add .nuxt to .dockerignore
            : dockerIgnoreContent));
          } // docker-compose.yml should only include the necessary instructions
          // for the client side


          if (!_fs["default"].existsSync('server')) {
            dockerComposeTemplate = dockerComposeTemplate.slice(0, template === 'Nuxt.js' ? 12 : 10);
          } // Create docker-compose.yml at project root


          if (!_fs["default"].existsSync('docker-compose.yml')) {
            _fs["default"].writeFileSync('docker-compose.yml', dockerComposeTemplate.join('\n'));
          }

          _context.prev = 15;
          _context.next = 18;
          return _execa["default"].command('docker-compose up', {
            stdio: 'inherit'
          });

        case 18:
          _context.next = 23;
          break;

        case 20:
          _context.prev = 20;
          _context.t0 = _context["catch"](15);
          process.exit(1);

        case 23:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[15, 20]]);
}));

exports["default"] = _default;