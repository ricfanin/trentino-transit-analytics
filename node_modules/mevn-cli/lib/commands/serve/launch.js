'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _execa = _interopRequireDefault(require("execa"));

var _fs = _interopRequireDefault(require("fs"));

var _exec = _interopRequireDefault(require("../../utils/exec"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Serve the webapp locally
 *
 * @param {String} projectConfig - Boilerplate template of choice
 * @param {String} templateDir - The directory to execute shell command (client/server)
 * @returns {Promise<void>}
 */
var _default = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(projectConfig, templateDir) {
    var port, projectTemplate, isConfigured, cmd;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            projectTemplate = projectConfig.template, isConfigured = projectConfig.isConfigured;

            if (templateDir === 'client') {
              port = projectTemplate === 'Nuxt.js' ? '3000' : '3002';
            } else {
              port = projectTemplate === 'GraphQL' ? '9000/graphql' : '9000/api';
            }

            if (isConfigured[templateDir]) {
              _context.next = 7;
              break;
            }

            _context.next = 5;
            return (0, _exec["default"])('npm install', 'Installing dependencies in the background. Hold on...', 'Dependencies were successfully installed', {
              cwd: templateDir
            });

          case 5:
            // Update .mevnrc
            projectConfig.isConfigured[templateDir] = true;

            _fs["default"].writeFileSync('.mevnrc', JSON.stringify(projectConfig, null, 2));

          case 7:
            cmd = projectTemplate === 'Nuxt.js' ? 'dev' : 'serve';

            _execa["default"].command("npm run ".concat(cmd, " -- --port ").concat(port, " --open"), {
              stdio: 'inherit',
              cwd: templateDir
            });

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports["default"] = _default;