'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _nodeBanner = _interopRequireDefault(require("node-banner"));

var _launch = _interopRequireDefault(require("./launch"));

var _helpers = require("../../utils/helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Prompts the user to choose between client/server side to be served locally
 *
 * @returns {Promise<void>}
 */
var _default = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  var templateDir, projectConfig, _yield$dirOfChoice;

  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _nodeBanner["default"])('MEVN CLI', 'Light speed setup for MEVN stack based apps.');

        case 2:
          (0, _helpers.checkIfConfigFileExists)();
          templateDir = 'client';
          projectConfig = (0, _helpers.fetchProjectConfig)();

          if (!_fs["default"].existsSync('./server')) {
            _context.next = 10;
            break;
          }

          _context.next = 8;
          return (0, _helpers.dirOfChoice)();

        case 8:
          _yield$dirOfChoice = _context.sent;
          templateDir = _yield$dirOfChoice.dir;

        case 10:
          // Proceed with further installation
          (0, _launch["default"])(projectConfig, templateDir);

        case 11:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}));

exports["default"] = _default;