#!/usr/bin/env node
'use strict'; // Require Modules.

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("@babel/polyfill");

var _chalk = _interopRequireDefault(require("chalk"));

var _envinfo = _interopRequireDefault(require("envinfo"));

var _leven = _interopRequireDefault(require("leven"));

var _commander = _interopRequireDefault(require("commander"));

var _updateNotifier = _interopRequireDefault(require("update-notifier"));

var _add = _interopRequireDefault(require("./commands/add"));

var _codesplit = _interopRequireDefault(require("./commands/codesplit"));

var _deploy = _interopRequireDefault(require("./commands/deploy/"));

var _dockerize = _interopRequireDefault(require("./commands/dockerize"));

var _generate = _interopRequireDefault(require("./commands/generate"));

var _init = _interopRequireDefault(require("./commands/init"));

var _serve = _interopRequireDefault(require("./commands/serve"));

var logger = _interopRequireWildcard(require("./utils/logger"));

var _package = _interopRequireDefault(require("../package"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

(0, _updateNotifier["default"])({
  pkg: _package["default"]
}).notify();

var suggestCommands = function suggestCommands(cmd) {
  var availableCommands = _commander["default"].commands.map(function (c) {
    return c._name;
  });

  var suggestion = availableCommands.find(function (c) {
    return (0, _leven["default"])(c, cmd) < c.length * 0.4;
  });

  if (suggestion) {
    logger.error(" Did you mean ".concat(_chalk["default"].yellow(suggestion), "?"));
  }
}; // Defining all the available commands.


_commander["default"].version(_package["default"].version).usage('<command> [options]');

_commander["default"].command('init <appname>').description('Scaffolds a MEVN stack project in the current path').action(_init["default"]);

_commander["default"].command('codesplit').description('Lazy load components as required').action(_codesplit["default"]);

_commander["default"].command('generate').description('Generates client side component files and server side CRUD boilerplate template').action(_generate["default"]);

_commander["default"].command('add [deps...]').option('-d, --dev', 'install dev-dependencies').description('Install dependencies on the go').action(_add["default"]);

_commander["default"].command('serve').description('Serves client/server locally').action(_serve["default"]);

_commander["default"].command('dockerize').description('Serves the webapp as mult-container Docker applications').action(_dockerize["default"]);

_commander["default"].command('deploy').description('Deploys the webapp to a cloud solution of choice').action(_deploy["default"]);

_commander["default"].command('info').description('Prints debugging information about the local environment').action(function () {
  console.log(_chalk["default"].bold('\nEnvironment Info:'));

  _envinfo["default"].run({
    System: ['OS', 'CPU'],
    Binaries: ['Node', 'Yarn', 'npm'],
    Browsers: ['Chrome', 'Edge', 'Firefox', 'Safari'],
    npmGlobalPackages: ['mevn-cli']
  }).then(console.log);
}); // Validation for unknown commands


_commander["default"].on('command:*', function (_ref) {
  var _ref2 = _slicedToArray(_ref, 1),
      cmd = _ref2[0];

  _commander["default"].outputHelp();

  logger.error("\n Unknown command ".concat(_chalk["default"].yellow(cmd), ".\n"));
  suggestCommands(cmd);
  process.exitCode = 1;
});

_commander["default"].parse(process.argv); // Shows up help if no arguments were provided.


if (!_commander["default"].args.length) {
  _commander["default"].help();
}