"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _execa = _interopRequireDefault(require("execa"));

var _spinner = _interopRequireDefault(require("./spinner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Execute shell commands
 * @param {String} cmd - Command to be executed
 * @param {String} progressMsg - Suitable message to show up with the spinner during execution
 * @param {String} successMsg - Suitable message to show up with the spinner on successful completion
 * @param {Object} options - Optional argument to configure execa
 *
 * @returns {Promise<void>}
 */
var _default = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(cmd, progressMsg) {
    var successMsg,
        options,
        spinner,
        _args = arguments;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            successMsg = _args.length > 2 && _args[2] !== undefined ? _args[2] : 'Done';
            options = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};
            spinner = new _spinner["default"](progressMsg);
            spinner.start();
            _context.prev = 4;
            _context.next = 7;
            return _execa["default"].command(cmd, options);

          case 7:
            spinner.succeed(successMsg);
            _context.next = 14;
            break;

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](4);
            spinner.fail('Something went wrong');
            throw _context.t0;

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 10]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports["default"] = _default;