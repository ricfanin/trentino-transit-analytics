'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateInstallation = exports.validateInput = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _execa = _interopRequireDefault(require("execa"));

var _inquirer = _interopRequireDefault(require("inquirer"));

var _exec = _interopRequireDefault(require("./exec"));

var _constants = require("./constants");

var _spinner = _interopRequireDefault(require("./spinner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// Initialize the spinner.
var spinner = new _spinner["default"](); // Helpers

/**
 * Shows installation information
 *
 * @param {String} depCandidate - The repective package to be installed
 * @param {String} url - Official downloads page url
 * @returns {Void}
 */

var showInstallationInfo = function showInstallationInfo(depCandidate, url) {
  var msg = " You need to download ".concat(depCandidate, " from the official downloads page: ").concat(url);
  console.log(_chalk["default"].cyan.bold(msg));
  process.exit(0);
};
/**
 * Helper method to validate installation
 *
 * @param {String} dependency
 * @returns {Promise<boolean>}
 */


var checkInstallationStatus = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dependency) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return _execa["default"].command(dependency);

          case 3:
            return _context.abrupt("return", true);

          case 6:
            _context.prev = 6;
            _context.t0 = _context["catch"](0);
            return _context.abrupt("return", false);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 6]]);
  }));

  return function checkInstallationStatus(_x) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Install Git for supported platforms, else show installation instructions
 *
 * @returns{Promise<void>}
 */


var installGit = function installGit() {
  var url = 'https://git-scm.com/download/win';

  if (_constants.isWin) {
    return showInstallationInfo('git', url);
  }

  var packageMgr = _constants.isLinux ? 'apt' : 'brew';
  return (0, _exec["default"])("".concat(packageMgr, " install git"));
};
/**
 * Install Docker for Linux platform, else show installation instructions
 *
 * @returns{Promise<void>}
 */


var installDocker = function installDocker() {
  var urlMap = {
    win32: 'https://hub.docker.com/editions/community/docker-ce-desktop-windows',
    darwin: 'https://docs.docker.com/docker-for-mac/install/'
  };

  if (!_constants.isLinux) {
    return showInstallationInfo('docker', urlMap[process.platform]);
  }

  return (0, _exec["default"])('apt install docker.io');
}; // Exported methods

/**
 * Validates user input for input prompts
 *
 * @param {String} userInput
 * @returns {Boolean}
 */


var validateInput = function validateInput(userInput) {
  if (!userInput) {
    return "Can't be empty!";
  }

  return true;
};
/**
 * Checks if a necessary dependency is installed
 *
 * @param {String} dependency
 * @returns {Promise<Void>}
 */


exports.validateInput = validateInput;

var validateInstallation = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(dependency) {
    var isDepInstalled, sep, _yield$inquirer$promp, shouldInstallDep;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return checkInstallationStatus(dependency);

          case 2:
            isDepInstalled = _context2.sent;

            if (dependency.includes(' ')) {
              sep = dependency.includes('-') ? '-' : '';
              dependency = dependency.split(sep)[0];
            }

            if (isDepInstalled) {
              _context2.next = 18;
              break;
            }

            _context2.next = 7;
            return _inquirer["default"].prompt([{
              type: 'confirm',
              name: 'shouldInstallDep',
              message: "Sorry, ".concat(dependency, " is not installed on your system, Do you want to install it?")
            }]);

          case 7:
            _yield$inquirer$promp = _context2.sent;
            shouldInstallDep = _yield$inquirer$promp.shouldInstallDep;

            if (!shouldInstallDep) {
              console.warn(_chalk["default"].yellow.bold(" Warning:- ".concat(_chalk["default"].cyan.bold("".concat(dependency, " is required to be installed")), "\n        ")));
              process.exit(1);
            }

            spinner.text = "Installing ".concat(dependency);
            spinner.start();

            if (!(dependency === 'git')) {
              _context2.next = 14;
              break;
            }

            return _context2.abrupt("return", installGit());

          case 14:
            if (!(dependency === 'docker')) {
              _context2.next = 16;
              break;
            }

            return _context2.abrupt("return", installDocker());

          case 16:
            _context2.next = 18;
            return (0, _exec["default"])("npm install -g ".concat(dependency));

          case 18:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function validateInstallation(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports.validateInstallation = validateInstallation;